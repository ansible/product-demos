---
- name: Create new sudo user
  shell: |
    useradd kni
    passwd kni
    echo "kni ALL=(root) NOPASSWD:ALL" | tee -a /etc/sudoers.d/kni
    chmod 0440 /etc/sudoers.d/kni
    su - kni -c "ssh-keygen -t ed25519 -f /home/kni/.ssh/id_rsa -N ''"
  become: true

- name: Register provisioner node with RH subscription manager
  shell: |
    sudo subscription-manager register --username={{ rh_subscription_manager_user }} --password={{ rh_subscription_manager_pass }} --auto-attach
    sudo subscription-manager repos --enable=rhel-9-for-{{ ansible_architecture }}-appstream-rpms --enable=rhel-9-for-{{ ansible_architecture }}-baseos-rpms
  become_user: kni

- name: Install packages using DNF
  become_user: kni
  dnf:
    name: "{{ item }}"
    state: present
  loop:
    - libvirt
    - qemu-kvm
    - mkisofs
    - python3-devel
    - jq
    - ipmitool

- name: Restart the firewalld service
  become_user: kni
  service:
    name: firewalld
    state: restarted

- name: Add user to libvirt group
  become_user: kni
  user:
    name: "kni"
    groups: "libvirt"
    append: yes

- name: Enable firewalld http service
  become_user: kni
  shell: |
    sudo firewall-cmd --zone=public --add-service=http --permanent
    sudo firewall-cmd

- name: Start and enable libvirtd
  become_user: kni
  service:
    name: libvirtd
    enabled: yes
    state: started

- name: Create default storage pool and start
  become_user: kni
  shell: |
    sudo virsh pool-define-as --name default --type dir --target /var/lib/libvirt/images
    sudo virsh pool-start default
    sudo virsh pool-autostart default

- name: Configure provisioner node networking
  shell: |
    sudo nohup bash -c "
    nmcli con down \"{{ baremetal_nic_name }}\"
    nmcli con delete \"{{ baremetal_nic_name }}\"
    nmcli con down \"System {{ baremetal_nic_name }}\"
    nmcli con delete \"System {{ baremetal_nic_name }}\"
    nmcli connection add ifname baremetal type bridge con-name baremetal bridge.stp no
    nmcli con add type bridge-slave ifname \"{{ baremetal_nic_name }}\" master baremetal
    pkill dhclient;dhclient baremetal
  become_user: kni

- name: Create OCP deployment dir
  file:
    path: "{{ cluster_deploy_dir }}"
    state: directory
    recurse: yes
    mode: '0755'

- name: Create pull secret text file
  copy:
    content: "{{ ocp_pull_secret }}"
    dest: "{{ cluster_deploy_dir }}/pull-secret.txt"

- name: Retrieve OCP Install binary
  shell: |
    export RELEASE_IMAGE=$(curl -s https://mirror.openshift.com/pub/openshift-v4/{{ ansible_architecture }}/clients/ocp/{{ ocp_version }}/release.txt | grep 'Pull From: quay.io' | awk -F ' ' '{print $3}')
    curl -s https://mirror.openshift.com/pub/openshift-v4/clients/ocp/$VERSION/openshift-client-linux.tar.gz | tar zxvf - oc
    sudo cp oc /usr/local/bin
    chmod +x /usr/local/bin/oc
    oc adm release extract --registry-config "{{ cluster_deploy_dir }}/pull-secret.txt" --command=openshift-baremetal-install --to "{{ cluster_deploy_dir }}" ${RELEASE_IMAGE}
    sudo cp {{ cluster_deploy_dir }}/openshift-baremetal-install /usr/local/bin
    chmod +x /usr/local/bin/openshift-baremetal-install
  become_user: kni

- name: Create OCP cluster deployment dir
  file:
    path: "{{ cluster_deploy_dir }}/{{ cluster_name }}"
    state: directory
    recurse: yes
    mode: '0755'

- name: Copy install-config.yaml into cluster_deploy_dir
  copy:
    content: "{{ ocp_install_config }}"
    dest: "{{ cluster_deploy_dir }}/{{ cluster_name }}/install-config.yaml"
...
