---
- name: test stuff
  hosts: "{{ _hosts }}"
  gather_facts: false
  tasks:
  - name: Show hostnames
    ansible.builtin.debug:
      msg: "{{ lookup('ansible.builtin.inventory_hostnames', 'all') }}"
  
  - name: Show hostnames with keep
    ansible.builtin.debug:
      msg: "{{ lookup('ansible.builtin.inventory_hostnames', 'all') | ansible.utils.keep_keys(target=ansible_hostname}}"
  
#- name: Configure Operators
#  ansible.builtin.include_tasks: _operator_config_item.yml
#  loop: "{{ }}"
#  loop_control:
#    loop_var: _operator_name
#
#- name: Debug
#  ansible.builtin.debug:
#    msg: "{{ lookup('ansible.builtin.inventory_hostnames', 'all') }}"
#
#- name: Create snapshot for each host called on
#  ansible.builtin.include_tasks: per_host_snapshot.yml
#  loop: "{{ cluster_config_operators }}"
#  loop_control:
#    loop_var: _operator_name
#
#- name: Get state of VirtualMachine
#  redhat.openshift_virtualization.kubevirt_vm_info:
#    name: "{{ item }}"
#    namespace: "{{ vm_namespace }}"
#  register: state
#  with_inventory_hostnames:
#    - all
#
#- name: say state of VM
#  ansible.builtin.debug:
#    msg: "{{ state }}"
#
#- name: Stop VirtualMachine
#  redhat.openshift_virtualization.kubevirt_vm:
#    name: "{{ vm_namespace }}"
#    namespace: "{{ vm_namespace }}"
#    running: false
#    wait: true
#  when: state.resources.0.spec.running
#
#- name: Create a VirtualMachineSnapshot
#  kubernetes.core.k8s:
#    definition:
#      apiVersion: snapshot.kubevirt.io/v1alpha1
#      kind: VirtualMachineSnapshot
#      metadata:
#        generateName: "{{ vm_name }}-{{ ansible_date_time.iso8601 }}"
#        namespace: "{{ vm_namespace }}"
#      spec:
#        source:
#          apiGroup: kubevirt.io
#          kind: VirtualMachine
#          name: "{{ vm_name }}"
#    wait: true
#    wait_condition:
#      type: Ready
#  register: snapshot
#
#- name: Start VirtualMachine
#  redhat.openshift_virtualization.kubevirt_vm:
#    name: "{{ vm_name }}"
#    namespace: "{{ vm_namesace }}"
#    running: yes
#    wait: yes
#  when: state.resources.0.spec.running
#
#- name: Export snapshot name
#  ansible.builtin.set_stats:
#    data:
#      restore_snapshot_name: "{{ snapshot.result.metadata.name }}"
#
#- debug:
#    msg: "Successfully created snapshot {{ snapshot.result.metadata.name }}"
